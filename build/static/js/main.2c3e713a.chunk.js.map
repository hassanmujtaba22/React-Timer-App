{"version":3,"sources":["CalculateTimer.ts","Controls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalculateTimer","timeInSeconds","hours","Math","floor","minutes","seconds","Controls","props","setTimeInSeconds","useState","intervalId","setIntervalId","className","data-test","onClick","interval","setInterval","previousState","clearInterval","App","timerArray","setTimeArray","useEffect","timeArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAgBeA,MAhBf,SAAwBC,GACpB,IAAIC,EAAgBC,KAAKC,MAAMH,EAAgB,MAC3CI,EAAkBF,KAAKC,OAAOH,EAAyB,KAARC,GAAiB,IAChEI,EAAkBL,EAAyB,KAARC,EAA2B,GAAVG,EAMxD,MAAO,CAJWH,EAAQ,GAAR,WAAiBA,GAAUA,EACzBG,EAAU,GAAV,WAAmBA,GAAYA,EAC/BC,EAAU,GAAV,WAAmBA,GAAYA,IC6BxCC,MA9Bf,SAAkBC,GAAe,IACrBC,EAAqBD,EAArBC,iBADoB,EAEQC,mBAAiB,GAFzB,mBAErBC,EAFqB,KAETC,EAFS,KAqB5B,OACI,sBAAKC,UAAU,kBAAf,UACI,wBAAQA,UAAU,UAAUC,YAAU,MAAMC,QAnB3B,WACrB,IAAIC,EAAgBC,aAAY,WAC5BR,GAAiB,SAACS,GAAD,OACbA,EAAgB,OACrB,KAEHN,EAAcI,IAaV,kBACA,wBAAQH,UAAU,UAAUC,YAAU,MAAMC,QAX3B,WACrBI,cAAcR,IAUV,kBACA,wBAAQE,UAAU,UAAUC,YAAU,MAAMC,QAR1B,WACtBI,cAAcR,GACdF,EAAiB,IAMb,uB,MCLGW,MArBf,WAAgB,IAAD,EAC6BV,mBAAiB,GAD9C,mBACNT,EADM,KACSQ,EADT,OAEsBC,mBAAiC,IAFvD,mBAENW,EAFM,KAEMC,EAFN,KASb,OALAC,qBAAU,WACR,IAAIC,EAAoCxB,EAAeC,GACvDqB,EAAaE,KACZ,CAACvB,IAGF,uBAAMY,UAAU,gBAAgBC,YAAU,gBAA1C,UACE,0BAASD,UAAU,iBAAiBC,YAAU,iBAA9C,UACE,sBAAMD,UAAU,QAAQC,YAAU,QAAlC,SAA2CO,EAAW,KADxD,IAEE,sBAAMR,UAAU,QAAQC,YAAU,QAAlC,SAA2CO,EAAW,KAFxD,IAGE,sBAAMR,UAAU,QAAQC,YAAU,QAAlC,SAA2CO,EAAW,QAExD,cAAC,EAAD,CAAUZ,iBAAkBA,QCPnBgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2c3e713a.chunk.js","sourcesContent":["function CalculateTimer(timeInSeconds:number): Array<number|string> {\r\n    let hours: number = Math.floor(timeInSeconds / 3600);\r\n    let minutes: number = Math.floor((timeInSeconds - (hours * 3600)) / 60);\r\n    let seconds: number = timeInSeconds - (hours * 3600) - (minutes * 60);\r\n\r\n    let hoursFormat = hours < 10 ? `0${hours}` : hours;\r\n    let minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\r\n    let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return [\r\n        hoursFormat,\r\n        minutesFormat,\r\n        secondsFormat\r\n    ];\r\n}\r\n\r\nexport default CalculateTimer","import React, { useState } from 'react'\r\n\r\ntype Props = {\r\n    setTimeInSeconds: Function\r\n}\r\n\r\nfunction Controls(props: Props) {\r\n    const { setTimeInSeconds } = props;\r\n    const [intervalId, setIntervalId] = useState<number>(0)\r\n\r\n    const handlePlayButton = () => {\r\n        let interval: any = setInterval(() => {\r\n            setTimeInSeconds((previousState: number) =>\r\n                previousState + 1)\r\n        }, 1000)\r\n\r\n        setIntervalId(interval)\r\n    }\r\n\r\n    const handleStopButton = () => {\r\n        clearInterval(intervalId)\r\n    }\r\n\r\n    const handleResetButton = () => {\r\n        clearInterval(intervalId)\r\n        setTimeInSeconds(0)\r\n    }\r\n    return (\r\n        <div className=\"buttonContainer\">\r\n            <button className=\"buttons\" data-test=\"btn\" onClick={handlePlayButton}>Play</button>\r\n            <button className=\"buttons\" data-test=\"btn\" onClick={handleStopButton}>Stop</button>\r\n            <button className=\"buttons\" data-test=\"btn\" onClick={handleResetButton}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls\r\n","import React, { useEffect, useState } from 'react'\nimport CalculateTimer from \"./CalculateTimer\"\nimport Controls from \"./Controls\"\nimport \"./App.css\"\n\nfunction App() {\n  const [timeInSeconds, setTimeInSeconds] = useState<number>(0)\n  const [timerArray, setTimeArray] = useState<Array<number | string>>([])\n\n  useEffect(() => {\n    let timeArray: Array<number | string> = CalculateTimer(timeInSeconds);\n    setTimeArray(timeArray)\n  }, [timeInSeconds])\n\n  return (\n    <main className=\"mainContainer\" data-test=\"mainContainer\">\n      <section className=\"timerContainer\" data-test=\"timerContainer\">\n        <span className=\"timer\" data-test=\"timer\">{timerArray[0]}</span>:\n        <span className=\"timer\" data-test=\"timer\">{timerArray[1]}</span>:\n        <span className=\"timer\" data-test=\"timer\">{timerArray[2]}</span>\n      </section>\n      <Controls setTimeInSeconds={setTimeInSeconds} />\n    </main>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}